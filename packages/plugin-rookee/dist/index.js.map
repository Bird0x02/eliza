{"version":3,"sources":["../src/actions/getNewsCryptoPanic.ts","../src/index.ts"],"sourcesContent":["import {\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n    elizaLogger,\n    Action,\n    ActionExample,\n    ModelClass,\n    // Media\n} from \"@elizaos/core\";\n// import axios from 'axios';\n// import { callApi } from \"../axios\";\nimport { composeContext } from \"@elizaos/core\";\nimport { generateObjectDeprecated } from \"@elizaos/core\";\n\n\nconst newsCyptoPanicTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n    Example response:\n    \\`\\`\\`json\n    {\n        currencies:null,\n        kind: null,\n        filter: null,\n        size: null\n    }\n    \\`\\`\\`\n    {{recentMessages}}\n\n    Extract ONLY from the current message (ignore any previous context or messages):\n\n    Given the recent messages, extract the following information:\n    currencies: Extract cryptocurrency symbols, following these rules:\n                Look for common crypto symbols (BTC, ETH, SOL, SUI, etc.)\n                Convert all symbols to uppercase\n                If multiple currencies found, join them with commas\n                Must be wrapped in double quotes\n                Recognize variations like \"bitcoin\"/\"btc\", \"ethereum\"/\"eth\"\n                Look for connecting words like \"and\", \"&\", \",\" between symbols\n                If no currencies specified, return \"BTC,ETH,SUI\"\n\n    kind: Content type must be one of:\n        all (default if not specified)\n        news\n        media (must be wrapped in double quotes)\n        Recognize variations like \"NEWS\", \"MEDIA\"\n    filter: Content category must be one of:\n            rising\n            hot (default if not specified)\n            bullish\n            bearish\n            important\n            saved\n            lol (must be wrapped in double quotes)\n            Recognize variations like \"RISING\", \"HOT\", \"BULLISH\", \"BEARISH\", \"IMPORTANT\", \"SAVED\", \"LOL\"\n    size: Number of news items to return: Must be a positive integer Default is 1 if not specified Maximum value is 100 Minimum value is 1 If mentioned in message, use that number If not mentioned, use default value 1\n    VALIDATION RULES:\n            All property names must use double quotes\n            All string values must use double quotes\n            null values should not use quotes\n            No trailing commas allowed\n            No single quotes anywhere in the JSON\n    Respond with a JSON markdown block containing only the extracted values.`;\n\n\n\nexport  const getNewsCryptoPanic: Action = {\n    name: 'ANALYZE_CRYPTO_NEWS_PANIC',\n    description: 'provide news analysis deeply into crypto markets',\n    handler: async (runtime: IAgentRuntime,\n                    message: Memory,\n                    state: State,\n                    options: { [key: string]: unknown },\n                    callback: HandlerCallback) => {\n        try{\n            // Initialize or update state\n            if (!state) {\n                state = (await runtime.composeState(message)) as State;\n            } else {\n                state = await runtime.updateRecentMessageState(state);\n            }\n            const newsCryptoPannicContext = composeContext({\n                state,\n                template: newsCyptoPanicTemplate,\n            });\n            // Generate transfer content\n            const content = await generateObjectDeprecated({\n                runtime,\n                context: newsCryptoPannicContext,\n                modelClass: ModelClass.LARGE,\n            });\n            elizaLogger.log(\"content: \",content);\n            // elizaLogger.log(\"content: \",typeof content);\n            const urlCryptoPanic = `${process.env.CRYPTO_PANIC_URL}` || \"https://cryptopanic.com/api/free/v1/posts\";\n            if(!content){\n                return true;\n            }\n            content.auth_token = process.env.CRYPTO_PANIC_API_KEY;\n            content.approved=true\n            if(content.currencies === null){\n                content.currencies = \"BTC,ETH,SOL\";\n            }\n            if(content.kind === \"all\" || content.kind === null){\n                delete content.kind;\n            }\n            if( content.filter === null){\n                content.filter = \"hot\"\n            }\n            if( content.size === null){\n                content.size = 1\n            }\n            const size = content.size;\n            const requestOptions = {\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                };\n            const queryString = new URLSearchParams(content).toString();\n            const responseCryptoPanic = await fetch(`${urlCryptoPanic}?${queryString}`, requestOptions);\n                if (!responseCryptoPanic.ok) {\n                    elizaLogger.error(\"API Response:\", await responseCryptoPanic.text()); // Debug log\n                    throw new Error(\n                        `Embedding API Error: ${responseCryptoPanic.status} ${responseCryptoPanic.statusText}`\n                    );\n                }\n            const dataCryptoPanic:any = await responseCryptoPanic.json()\n            const dataOriginUrl = dataCryptoPanic.results.map((item:any) => item.source.url);\n            const promisesOriginUrl = dataOriginUrl.map(async (url) => {\n                const response = await fetch(url, requestOptions);\n                return await response.url;\n              });\n            const resultsOriginUrl = await Promise.all(promisesOriginUrl);\n            const dataResponse = dataCryptoPanic.results.map((item:any, index) => {\n                return {\n                    title: item.title,\n                    url: resultsOriginUrl[index]\n                }\n            });\n            let responseMessage = \"Stay updated! Here are todayâ€™s highlights:\";\n            callback({\n                text: responseMessage,\n                result:{\n                    type: \"news\",\n                    data: dataResponse.slice(0,size)\n                }\n              })\n            // elizaLogger.log(\"[coingecko] Handle with message ...DONE!\");\n            return true;\n        }\n        catch(error){\n            elizaLogger.error(\"[analyzeCryptoNewsPanic] %s\", error);\n            return false;\n        }\n    },\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\n    //   elizaLogger.log(\"[news] Validating ...\");\n    //   elizaLogger.log(\"[news] Validating ...DONE\");\n      return true;\n    },\n    similes: [\n        \"ANALYZE_CRYPTO_MARKET_NEWS\",\n        \"RESEARCH_CRYPTOCURRENCY_UPDATES\",\n        \"EVALUATE_DIGITAL_ASSET_NEWS\",\n        \"EXAMINE_BLOCKCHAIN_DEVELOPMENTS\",\n        \"INVESTIGAT_CRYPTO_TRENDS\",\n        \"ASSESS_MARKET_SENTIMENT\",\n        \"REVIEW_CRYPTO_ANNOUNCEMENTS\",\n        \"MONITOR_BLOCKCHAIN_NEWS\",\n        \"STUDY_DEFI_UPDATES\",\n        \"TRACK_CRYPTO_REGULATORY_NEWS\",\n        \"PARSE_CRYPTOCURRENCY_FEEDS\",\n        \"DIGEST_CRYPTO_MARKET_INTELLIGENCE\",\n        \"SCAN_BLOCKCHAIN_HEADLINES\",\n        \"INTERPRET_CRYPTO_MARKET_SIGNALS\",\n        \"PROCESS_DIGITAL_CURRENCY_NEWS\",\n        \"ANALYZE_CRYPTO_MARKET\",\n        \"ANALYZE_BEARISH\",\n        \"ANALYZE_BULLISH\",\n    ],\n    examples: [\n        [\n          {\n            \"user\": \"{{user1}}\",\n            \"content\": {\n              \"text\": \"Can you analyze the latest Bitcoin news?\"\n            }\n          },\n          {\n            \"user\": \"{{user2}}\",\n            \"content\": {\n              \"text\": \"Analyzing latest Bitcoin market news and sentiment\",\n              \"action\": \"ANALYZE_CRYPTO_NEWS\",\n              \"content\": {\n                \"params\": {\n                  \"currencies\": [\"BTC\"],\n                  \"kinds\": [\"news\"],\n                  \"filter\": \"hot\",\n                  \"public\": true\n                }\n              }\n            }\n          }\n        ],\n        [\n          {\n            \"user\": \"{{user1}}\",\n            \"content\": {\n              \"text\": \"Find bullish signals for ETH\"\n            }\n          },\n          {\n            \"user\": \"{{user2}}\",\n            \"content\": {\n              \"text\": \"Searching for bullish Ethereum market signals\",\n              \"action\": \"ANALYZE_CRYPTO_NEWS\",\n              \"content\": {\n                \"params\": {\n                  \"currencies\": [\"ETH\"],\n                  \"kinds\": [\"news\", \"post\"],\n                  \"filter\": \"bullish\",\n                  \"public\": true\n                }\n              }\n            }\n          }\n        ],\n        [\n          {\n            \"user\": \"{{user1}}\",\n            \"content\": {\n              \"text\": \"Check market sentiment for SOL\"\n            }\n          },\n          {\n            \"user\": \"{{user2}}\",\n            \"content\": {\n              \"text\": \"Analyzing Solana market sentiment across news sources\",\n              \"action\": \"ANALYZE_CRYPTO_NEWS\",\n              \"content\": {\n                \"params\": {\n                  \"currencies\": [\"SOL\"],\n                  \"kinds\": [\"news\", \"post\"],\n                  \"filter\": \"rising\",\n                  \"public\": true\n                }\n              }\n            }\n          }\n        ]\n      ] as ActionExample[][]\n};\n\n\n\n","import { Plugin } from \"@elizaos/core\";\n\nimport { getNewsCryptoPanic } from \"./actions/getNewsCryptoPanic.ts\";\nexport const rookeePlugin: Plugin = {\n    name: \"rookee-plugin\",\n    description: \"Adds custom functionality\",\n    actions: [\n        getNewsCryptoPanic,\n    ],\n    evaluators: [\n        // sampleEvaluator\n    ],\n    providers: [\n        // sampleProvider\n    ],\n    services: [\n        /* custom services */\n    ],\n};\n"],"mappings":"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","names":[]}